#
#
play.application.loader = jkugiya.moneytransfer.impl.MoneytransferLoader
akka.actor {
  serialization-bindings {
    # commands won't use play-json but Akka's jackson support
  }
}
jdbc-defaults.slick {
  profile = "slick.jdbc.MySQLProfile$"
  # akka-persistence-jdbcが使用するデータベース
  # slickが使用するものと分ける場合は、別に用意する
  jndiDbName=AccountingDB
  # JDBCドライバ
  driver = "com.mysql.cj.jdbc.Driver"
}
db.default {
  # 接続するデータベースのURL
  url = "jdbc:mysql://localhost:33007/money_local?verifyServerCertificate=false&useSSL=false"
  # データベースユーザ
  username = "root"
  # JDBC ドライバ
  driver = "com.mysql.cj.jdbc.Driver"
  # DataSourceのJNDI名
  # Slickで使用する
  jndiName=AccountingDS
  # データベースのJNDI名
  # Lagomがakka-persistence-jdbcプラグインはこのJDNI名を使用してSlickのデータベースを特定する
  # このデータベースは以下のasync-executorを使用する
  jndiDbName=AccountingDB
  async-executor {
    # このasync-executorのキューサイズ
    queueSize = 10000
    # スレッド数。目安: コア数 * 5
    numThreads = 20
    # 最小コネクション数。目安: スレッド数と同じにする
    minConnections = 20
    # 最大コネクション数。目安: スレッド数と同じにする
    maxConnections = 20
    # AsyncExecutorのMBeanを登録するかどうか
    registerMbeans = false
  }
  # コネクションプールの設定
  hikaricp {
    # 使用してなくても維持するコネクションの最小数。
    minimumIdle = ${db.default.async-executor.minConnections}
    # 最大のプールサイズ。async-executorの最大コネクション数より大きくしても意味がないので、同じにしておく。
    maximumPoolSize = ${db.default.async-executor.maxConnections}
  }
}
# akka-persistence-jdbcの設定
lagom.persistence.jdbc {
  create-tables {
    # イベント・ソーシングに必要なテーブルが存在しない場合に自動生成するかどうか
    auto = true
    # テーブル生成のタイムアウト
    timeout = 20s
    # どのクラスターロールでテーブルを作成するか
    run-on-role = ""
    # テーブル作成失敗時のbackoffの設定
    failure-exponential-backoff {
      # 失敗後に再実行するときの最小待ち時間
      min = 3s
      # 失敗後に再実行するときの最大待ち時間
      max = 30s
      # 待ち時間を遅延するときに使用するときのランダム要因
      random-factor = 0.2
    }
  }
}